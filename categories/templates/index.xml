<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Templates on Hugo</title><link>https://gohugo.io/categories/templates/</link><description>Recent content in Templates on Hugo</description><generator>Hugo</generator><language>en</language><atom:link href="https://gohugo.io/categories/templates/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to templating</title><link>https://gohugo.io/templates/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/introduction/</guid><description>A template is a file in the layouts directory of a project, theme, or module. Templates use variables , functions, and methods to transform your content, resources, and data into a published page.
Hugo uses Go&amp;rsquo;s text/template and html/template packages.
The text/template package implements data-driven templates for generating textual output, while the html/template package implements data-driven templates for generating HTML output safe against code injection.
By default, Hugo uses the html/template package when rendering HTML files.</description></item><item><title>Template types</title><link>https://gohugo.io/templates/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/types/</guid><description>Structure Create templates in the layouts directory in the root of your project.
Although your site may not require each of these templates, the example below is typical for a site of medium complexity.
layouts/ ├── _default/ │ ├── _markup/ │ │ ├── render-image.html &amp;lt;-- render hook │ │ └── render-link.html &amp;lt;-- render hook │ ├── baseof.html │ ├── home.html │ ├── section.html │ ├── single.html │ ├── taxonomy.html │ └── term.</description></item><item><title>Template lookup order</title><link>https://gohugo.io/templates/lookup-order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/lookup-order/</guid><description>Lookup rules Hugo takes the parameters listed below into consideration when choosing a template for a given page. The templates are ordered by specificity. This should feel natural, but look at the table below for concrete examples of the different parameter variations.
Kind The page Kind (the home page is one). See the example tables below per kind. This also determines if it is a single page (i.e. a regular content page.</description></item><item><title>Base templates</title><link>https://gohugo.io/templates/base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/base/</guid><description>The block keyword allows you to define the outer shell of your pages&amp;rsquo; one or more master template(s) and then fill in or override portions as necessary.
Base template lookup order The base template lookup order closely follows that of the template it applies to (e.g. _default/list.html).
See Template Lookup Order for details and examples.
Define the base template The following defines a simple base template at _default/baseof.html. As a default template, it is the shell from which all your pages will be rendered unless you specify another *baseof.</description></item><item><title>Home templates</title><link>https://gohugo.io/templates/home/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/home/</guid><description>The home template is the only required template for building a site and therefore useful when bootstrapping a new site and template. It is also the only required template if you are developing a single-page website.
Home template lookup order See Template Lookup.
Add content and front matter to the home page The home page accepts content and front matter from an _index.md file. This file should live at the root of your content folder (i.</description></item><item><title>Single templates</title><link>https://gohugo.io/templates/single/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/single/</guid><description>The single template below inherits the site&amp;rsquo;s shell from the base template.
layouts/_default/single.html {{ define &amp;#34;main&amp;#34; }} &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; {{ .Content }} {{ end }} Review the template lookup order to select a template path that provides the desired level of specificity.
The single template below inherits the site&amp;rsquo;s shell from the base template, and renders the page title, creation date, content, and a list of associated terms in the &amp;ldquo;tags&amp;rdquo; taxonomy.</description></item><item><title>Section templates</title><link>https://gohugo.io/templates/section/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/section/</guid><description>Add content and front matter to section templates To effectively leverage section templates, you should first understand Hugo&amp;rsquo;s content organization and, specifically, the purpose of _index.md for adding content and front matter to section and other list pages.
Section template lookup order See Template Lookup.
Example: creating a default section template layouts/_default/section.html {{ define &amp;#34;main&amp;#34; }} &amp;lt;main&amp;gt; {{ .Content }} {{ $pages := where site.RegularPages &amp;#34;Type&amp;#34; &amp;#34;posts&amp;#34; }} {{ $paginator := .</description></item><item><title>Taxonomy templates</title><link>https://gohugo.io/templates/taxonomy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/taxonomy/</guid><description>The taxonomy template below inherits the site&amp;rsquo;s shell from the base template, and renders a list of terms in the current taxonomy.
layouts/_default/taxonomy.html {{ define &amp;#34;main&amp;#34; }} &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; {{ .Content }} {{ range .Pages }} &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .RelPermalink }}&amp;#34;&amp;gt;{{ .LinkTitle }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; {{ end }} {{ end }} Review the template lookup order to select a template path that provides the desired level of specificity.
In the example above, the taxonomy and term will be capitalized if their respective pages are not backed by files.</description></item><item><title>Term templates</title><link>https://gohugo.io/templates/term/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/term/</guid><description>The term template below inherits the site&amp;rsquo;s shell from the base template, and renders a list of pages associated with the current term.
layouts/_default/term.html {{ define &amp;#34;main&amp;#34; }} &amp;lt;h1&amp;gt;{{ .Title }}&amp;lt;/h1&amp;gt; {{ .Content }} {{ range .Pages }} &amp;lt;h2&amp;gt;&amp;lt;a href=&amp;#34;{{ .RelPermalink }}&amp;#34;&amp;gt;{{ .LinkTitle }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt; {{ end }} {{ end }} Review the template lookup order to select a template path that provides the desired level of specificity.
In the example above, the term will be capitalized if its respective page is not backed by a file.</description></item><item><title>Partial templates</title><link>https://gohugo.io/templates/partial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/partial/</guid><description>Use partials in your templates All partials for your Hugo project are located in a single layouts/partials directory. For better organization, you can create multiple subdirectories within partials as well:
layouts/ └── partials/ ├── footer/ │ ├── scripts.html │ └── site-footer.html ├── head/ │ ├── favicons.html │ ├── metadata.html │ ├── prerender.html │ └── twitter.html └── header/ ├── site-header.html └── site-nav.html All partials are called within your templates using the following pattern:</description></item><item><title>Content view templates</title><link>https://gohugo.io/templates/content-view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/content-view/</guid><description>The following are common use cases for content views:
You want content of every type to be shown on the home page but only with limited summary views. You only want a bulleted list of your content in a taxonomy template. Views make this very straightforward by delegating the rendering of each different type of content to the content itself. Create a content view To create a new view, create a template in each of your different content type directories with the view name.</description></item><item><title>Create your own shortcodes</title><link>https://gohugo.io/templates/shortcode/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/shortcode/</guid><description>Shortcodes are a means to consolidate templating into small, reusable snippets that you can embed directly inside your content.
Hugo also ships with embedded shortcodes for common use cases. (See Content Management: Shortcodes.)
Create custom shortcodes Hugo&amp;rsquo;s embedded shortcodes cover many common, but not all, use cases. Luckily, Hugo provides the ability to easily create custom shortcodes to meet your website&amp;rsquo;s needs.
File location To create a shortcode, place an HTML template in the layouts/shortcodes directory.</description></item><item><title>Sitemap templates</title><link>https://gohugo.io/templates/sitemap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/sitemap/</guid><description>Overview Hugo&amp;rsquo;s embedded sitemap templates conform to v0.9 of the sitemap protocol.
With a monolingual project, Hugo generates a sitemap.xml file in the root of the publishDir using the embedded sitemap template.
With a multilingual project, Hugo generates:
A sitemap.xml file in the root of each site (language) using the embedded sitemap template A sitemap.xml file in the root of the publishDir using the embedded sitemapindex template Configuration These are the default sitemap configuration values.</description></item><item><title>RSS templates</title><link>https://gohugo.io/templates/rss/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/rss/</guid><description>Configuration By default, when you build your site, Hugo generates RSS feeds for home, section, taxonomy, and term pages. Control feed generation in your site configuration. For example, to generate feeds for home and section pages, but not for taxonomy and term pages:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; outputs: home: - html - rss section: - html - rss taxonomy: - html term: - html [outputs] home = [&amp;#39;html&amp;#39;, &amp;#39;rss&amp;#39;] section = [&amp;#39;html&amp;#39;, &amp;#39;rss&amp;#39;] taxonomy = [&amp;#39;html&amp;#39;] term = [&amp;#39;html&amp;#39;] { &amp;#34;outputs&amp;#34;: { &amp;#34;home&amp;#34;: [ &amp;#34;html&amp;#34;, &amp;#34;rss&amp;#34; ], &amp;#34;section&amp;#34;: [ &amp;#34;html&amp;#34;, &amp;#34;rss&amp;#34; ], &amp;#34;taxonomy&amp;#34;: [ &amp;#34;html&amp;#34; ], &amp;#34;term&amp;#34;: [ &amp;#34;html&amp;#34; ] } } To disable feed generation for all page kinds:</description></item><item><title>Custom 404 page</title><link>https://gohugo.io/templates/404/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/404/</guid><description>To render a 404 error page in the root of your site, create a 404 template in the root of the layouts directory. For example:
layouts/404.html {{ define &amp;#34;main&amp;#34; }} &amp;lt;h1&amp;gt;404 Not Found&amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;The page you requested cannot be found.&amp;lt;/p&amp;gt; &amp;lt;p&amp;gt; &amp;lt;a href=&amp;#34;{{ .Site.Home.RelPermalink }}&amp;#34;&amp;gt; Return to the home page &amp;lt;/a&amp;gt; &amp;lt;/p&amp;gt; {{ end }} For multilingual sites, add the language key to the file name:
layouts/ ├── 404.de.html ├── 404.</description></item><item><title>robots.txt template</title><link>https://gohugo.io/templates/robots/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/robots/</guid><description>To generate a robots.txt file from a template, change the site configuration:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; enableRobotsTXT: true enableRobotsTXT = true { &amp;#34;enableRobotsTXT&amp;#34;: true } By default, Hugo generates robots.txt using an embedded template.
User-agent: * Search engines that honor the Robots Exclusion Protocol will interpret this as permission to crawl everything on the site.
robots.txt template lookup order You may overwrite the internal template with a custom template.</description></item><item><title>Menus</title><link>https://gohugo.io/templates/menu/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/menu/</guid><description>Overview After defining menu entries, use [menu methods] to render a menu.
Three factors determine how to render a menu:
The method used to define the menu entries: automatic, in front matter, or in site configuration The menu structure: flat or nested The method used to localize the menu entries: site configuration or translation tables The example below handles every combination.
Example This partial template recursively &amp;ldquo;walks&amp;rdquo; a menu structure, rendering a localized, accessible nested list.</description></item><item><title>Pagination</title><link>https://gohugo.io/templates/pagination/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/pagination/</guid><description>Displaying a large page collection on a list page is not user-friendly:
A massive list can be intimidating and difficult to navigate. Users may get lost in the sheer volume of information. Large pages take longer to load, which can frustrate users and lead to them abandoning the site. Without any filtering or organization, finding a specific item becomes a tedious scrolling exercise. Improve usability by paginating home, section, taxonomy, and term pages.</description></item><item><title>Embedded templates</title><link>https://gohugo.io/templates/embedded/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/embedded/</guid><description>Disqus To override Hugo&amp;rsquo;s embedded Disqus template, copy the source code to a file with the same name in the layouts/partials directory, then call it from your templates using the partial function:
{{ partial &amp;quot;disqus.html&amp;quot; . }}
Hugo includes an embedded template for Disqus, a popular commenting system for both static and dynamic websites. To effectively use Disqus, secure a Disqus &amp;ldquo;shortname&amp;rdquo; by signing up for the free service.
To include the embedded template:</description></item><item><title>Custom output formats</title><link>https://gohugo.io/templates/output-formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/templates/output-formats/</guid><description>This page describes how to properly configure your site with the media types and output formats, as well as where to create your templates for your custom outputs.
Media types A media type (formerly known as a MIME type) is a two-part identifier for file formats and format contents transmitted on the internet.
This is the full set of built-in media types in Hugo:
Type suffixes application/json [json] application/manifest&amp;#43;json [webmanifest] application/octet-stream [webmanifest] application/pdf [pdf] application/rss&amp;#43;xml [xml rss] application/toml [toml] application/wasm [wasm] application/xml [xml] application/yaml [yaml yml] font/otf [otf] font/ttf [ttf] image/bmp [bmp] image/gif [gif] image/jpeg [jpg jpeg jpe jif jfif] image/png [png] image/svg&amp;#43;xml [svg] image/tiff [tif tiff] image/webp [webp] text/asciidoc [adoc asciidoc ad] text/calendar [ics] text/css [css] text/csv [csv] text/html [html htm] text/javascript [js jsm mjs] text/jsx [jsx] text/markdown [md mdown markdown] text/org [org] text/pandoc [pandoc pdc] text/plain [txt] text/rst [rst] text/tsx [tsx] text/typescript [ts] text/x-sass [sass] text/x-scss [scss] video/3gpp [3gpp 3gp] video/mp4 [mp4] video/mpeg [mpg mpeg] video/ogg [ogv] video/webm [webm] video/x-msvideo [avi] Note:</description></item></channel></rss>