<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Content Management on Hugo</title><link>https://gohugo.io/categories/content-management/</link><description>Recent content in Content Management on Hugo</description><generator>Hugo</generator><language>en</language><atom:link href="https://gohugo.io/categories/content-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Content organization</title><link>https://gohugo.io/content-management/organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/organization/</guid><description>Page bundles Hugo 0.32 announced page-relative images and other resources packaged into Page Bundles.
These terms are connected, and you also need to read about Page Resources and Image Processing to get the full picture.
content/ ├── blog/ │ ├── hugo-is-cool/ │ │ ├── images/ │ │ │ ├── funnier-cat.jpg │ │ │ └── funny-cat.jpg │ │ ├── cats-info.md │ │ └── index.md │ ├── posts/ │ │ ├── post1.md │ │ └── post2.</description></item><item><title>Page bundles</title><link>https://gohugo.io/content-management/page-bundles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/page-bundles/</guid><description>Introduction A page bundle is a directory that encapsulates both content and associated resources.
By way of example, this site has an &amp;ldquo;about&amp;rdquo; page and a &amp;ldquo;privacy&amp;rdquo; page:
content/ ├── about/ │ ├── index.md │ └── welcome.jpg └── privacy.md The &amp;ldquo;about&amp;rdquo; page is a page bundle. It logically associates a resource with content by bundling them together. Resources within a page bundle are page resources, accessible with the Resources method on the Page object.</description></item><item><title>Content formats</title><link>https://gohugo.io/content-management/formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/formats/</guid><description>Introduction You may mix content formats throughout your site. For example:
content/ └── posts/ ├── post-1.md ├── post-2.adoc ├── post-3.org ├── post-4.pandoc ├── post-5.rst └── post-6.html Regardless of content format, all content must have front matter, preferably including both title and date.
Hugo selects the content renderer based on the markup identifier in front matter, falling back to the file extension. See the classification table below for a list of markup identifiers and recognized file extensions.</description></item><item><title>Front matter</title><link>https://gohugo.io/content-management/front-matter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/front-matter/</guid><description>Overview The front matter at the top of each content file is metadata that:
Describes the content Augments the content Establishes relationships with other content Controls the published structure of your site Determines template selection Provide front matter using a serialization format, one of JSON, TOML, or YAML. Hugo determines the front matter format by examining the delimiters that separate the front matter from the page content.
See examples of front matter delimiters by toggling between the serialization formats below.</description></item><item><title>Build options</title><link>https://gohugo.io/content-management/build-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/build-options/</guid><description>Build options are stored in a reserved front matter object named build with these defaults:
content/example/index.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- build: list: always publishResources: true render: always --- +++ [build] list = &amp;#39;always&amp;#39; publishResources = true render = &amp;#39;always&amp;#39; +++ { &amp;#34;build&amp;#34;: { &amp;#34;list&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;publishResources&amp;#34;: true, &amp;#34;render&amp;#34;: &amp;#34;always&amp;#34; } } list When to include the page within page collections. Specify one of: always Include the page in all page collections.</description></item><item><title>Page resources</title><link>https://gohugo.io/content-management/page-resources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/page-resources/</guid><description>Page resources are only accessible from page bundles, those directories with index.md or _index.md files at their root. Page resources are only available to the page with which they are bundled.
In this example, first-post is a page bundle with access to 10 page resources including audio, data, documents, images, and video. Although second-post is also a page bundle, it has no page resources and is unable to directly access the page resources associated with first-post.</description></item><item><title>Image processing</title><link>https://gohugo.io/content-management/image-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/image-processing/</guid><description>Image resources To process an image you must access the file as a page resource, global resource, or remote resource.
Page resource A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.
content/ └── posts/ └── post-1/ &amp;lt;-- page bundle ├── index.md └── sunset.jpg &amp;lt;-- page resource To access an image as a page resource:</description></item><item><title>Shortcodes</title><link>https://gohugo.io/content-management/shortcodes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/shortcodes/</guid><description>What a shortcode is Hugo loves Markdown because of its simple content format, but there are times when Markdown falls short. Often, content authors are forced to add raw HTML (e.g., video &amp;lt;iframe&amp;gt;&amp;rsquo;s) to Markdown content. We think this contradicts the beautiful simplicity of Markdown&amp;rsquo;s syntax.
Hugo created shortcodes to circumvent these limitations.
A shortcode is a simple snippet inside a content file that Hugo will render using a predefined template.</description></item><item><title>Related content</title><link>https://gohugo.io/content-management/related/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/related/</guid><description>Hugo uses a set of factors to identify a page&amp;rsquo;s related content based on front matter parameters. This can be tuned to the desired set of indices and parameters or left to Hugo&amp;rsquo;s default Related Content configuration.
List related content To list up to 5 related pages (which share the same date or keyword parameters) is as simple as including something similar to this partial in your template:
layouts/partials/related.html {{ $related := .</description></item><item><title>Sections</title><link>https://gohugo.io/content-management/sections/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/sections/</guid><description>Overview A section is a top-level content directory, or any content directory with an _index.md file. A content directory with an _index.md file is also known as a branch bundle. Section templates receive one or more page collections in context.
Although top-level directories without _index.md files are sections, we recommend creating _index.md files in all sections.
A typical site consists of one or more sections. For example:
content/ ├── articles/ &amp;lt;-- section (top-level directory) │ ├── 2022/ │ │ ├── article-1/ │ │ │ ├── cover.</description></item><item><title>Content types</title><link>https://gohugo.io/content-management/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/types/</guid><description>A content type is a way to organize your content. Hugo resolves the content type from either the type in front matter or, if not set, the first directory in the file path. E.g. content/blog/my-first-event.md will be of type blog if no type is set.
A content type is used to
Determine how the content is rendered. See Template Lookup Order and Content Views for more. Determine which archetype template to use for new content.</description></item><item><title>Archetypes</title><link>https://gohugo.io/content-management/archetypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/archetypes/</guid><description>Overview A content file consists of front matter and markup. The markup is typically Markdown, but Hugo also supports other content formats. Front matter can be TOML, YAML, or JSON.
The hugo new content command creates a new file in the content directory, using an archetype as a template. This is the default archetype:
archetypes/default.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- date: &amp;#39;{{ .Date }}&amp;#39; draft: true title: &amp;#39;{{ replace .</description></item><item><title>Taxonomies</title><link>https://gohugo.io/content-management/taxonomies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/taxonomies/</guid><description>What is a taxonomy? Hugo includes support for user-defined groupings of content called taxonomies. Taxonomies are classifications of logical relationships between content.
Definitions Taxonomy a categorization that can be used to classify content Term a key within the taxonomy Value a piece of content assigned to a term Example taxonomy: movie website Let&amp;rsquo;s assume you are making a website about movies. You may want to include the following taxonomies:
Actors Directors Studios Genre Year Awards Then, in each of the movies, you would specify terms for each of these taxonomies (i.</description></item><item><title>Content summaries</title><link>https://gohugo.io/content-management/summaries/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/summaries/</guid><description>&lt;!-- raw HTML omitted -->
&lt;!-- raw HTML omitted --></description></item><item><title>Links and cross references</title><link>https://gohugo.io/content-management/cross-references/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/cross-references/</guid><description>The ref and relref shortcodes display the absolute and relative permalinks to a document, respectively.
Use of ref and relref The ref and relref shortcodes require a single argument: the path to a content document, with or without a file extension, with or without an anchor. Paths without a leading / are first resolved relative to the current page, then to the remainder of the site.
. └── content ├── about | ├── _index.</description></item><item><title>URL management</title><link>https://gohugo.io/content-management/urls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/urls/</guid><description>Overview By default, when Hugo renders a page, the resulting URL matches the file path within the content directory. For example:
content/posts/post-1.md → https://example.org/posts/post-1/ You can change the structure and appearance of URLs with front matter values and site configuration options.
Front matter slug Set the slug in front matter to override the last segment of the path. The slug value does not affect section pages.
content/posts/post-1.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- slug: my-first-post title: My First Post --- +++ slug = &amp;#39;my-first-post&amp;#39; title = &amp;#39;My First Post&amp;#39; +++ { &amp;#34;slug&amp;#34;: &amp;#34;my-first-post&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;My First Post&amp;#34; } The resulting URL will be:</description></item><item><title>Menus</title><link>https://gohugo.io/content-management/menus/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/menus/</guid><description>Overview To create a menu for your site:
Define the menu entries Localize each entry Render the menu with a template Create multiple menus, either flat or nested. For example, create a main menu for the header, and a separate menu for the footer.
There are three ways to define menu entries:
Automatically In front matter In site configuration Although you can use these methods in combination when defining a menu, the menu will be easier to conceptualize and maintain if you use one method throughout the site.</description></item><item><title>Comments</title><link>https://gohugo.io/content-management/comments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/comments/</guid><description>Hugo ships with support for Disqus, a third-party service that provides comment and community capabilities to websites via JavaScript.
Your theme may already support Disqus, but if not, it is easy to add to your templates via Hugo&amp;rsquo;s built-in Disqus partial.
Add Disqus Hugo comes with all the code you need to load Disqus into your templates. Before adding Disqus to your site, you&amp;rsquo;ll need to set up an account.</description></item><item><title>Multilingual mode</title><link>https://gohugo.io/content-management/multilingual/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/multilingual/</guid><description>Configure languages This is the default language configuration:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; languages: en: disabled: false languageCode: &amp;#34;&amp;#34; languageDirection: &amp;#34;&amp;#34; languageName: &amp;#34;&amp;#34; title: &amp;#34;&amp;#34; weight: 0 [languages] [languages.en] disabled = false languageCode = &amp;#39;&amp;#39; languageDirection = &amp;#39;&amp;#39; languageName = &amp;#39;&amp;#39; title = &amp;#39;&amp;#39; weight = 0 { &amp;#34;languages&amp;#34;: { &amp;#34;en&amp;#34;: { &amp;#34;disabled&amp;#34;: false, &amp;#34;languageCode&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;languageDirection&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;languageName&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;&amp;#34;, &amp;#34;weight&amp;#34;: 0 } } } In the above, en is the language key.</description></item><item><title>Markdown attributes</title><link>https://gohugo.io/content-management/markdown-attributes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/markdown-attributes/</guid><description>Overview Hugo supports Markdown attributes on images and block elements including blockquotes, fenced code blocks, headings, horizontal rules, lists, paragraphs, and tables.
For example:
This is a paragraph. {class=&amp;#34;foo bar&amp;#34; id=&amp;#34;baz&amp;#34;} With class and id you can use shorthand notation:
This is a paragraph. {.foo .bar #baz} Hugo renders both of these to:
&amp;lt;p class=&amp;#34;foo bar&amp;#34; id=&amp;#34;baz&amp;#34;&amp;gt;This is a paragraph.&amp;lt;/p&amp;gt; Block elements Update your site configuration to enable Markdown attributes for block-level elements.</description></item><item><title>Syntax highlighting</title><link>https://gohugo.io/content-management/syntax-highlighting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/syntax-highlighting/</guid><description>Hugo uses Chroma as its code highlighter; it is built in Go and is really, really fast.
Configure syntax highlighter See Configure Highlight.
Generate syntax highlighter CSS If you run with markup.highlight.noClasses=false in your site configuration, you need a style sheet. The style sheet will override the style specified in markup.highlight.style.
You can generate one with Hugo:
hugo gen chromastyles --style=monokai &amp;gt; syntax.css Run hugo gen chromastyles -h for more options.</description></item><item><title>Diagrams</title><link>https://gohugo.io/content-management/diagrams/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/diagrams/</guid><description>GoAT diagrams (ASCII) Hugo natively supports GoAT diagrams with an embedded code block render hook. This means that this code block:
```goat . . . .--- 1 .-- 1 / 1 / \ | | .---+ .-+ + / \ .---+---. .--+--. | &amp;#39;--- 2 | &amp;#39;-- 2 / \ 2 + + | | | | ---+ ---+ + / \ / \ .-+-. .-+-. .+. .+. | .--- 3 | .</description></item><item><title>Mathematics in Markdown</title><link>https://gohugo.io/content-management/mathematics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/mathematics/</guid><description>New in v0.122.0 \[ \begin{aligned} KL(\hat{y} || y) &amp;= \sum_{c=1}^{M}\hat{y}_c \log{\frac{\hat{y}_c}{y_c}} \\ JS(\hat{y} || y) &amp;= \frac{1}{2}(KL(y||\frac{y+\hat{y}}{2}) + KL(\hat{y}||\frac{y+\hat{y}}{2})) \end{aligned} \] Overview Mathematical equations and expressions authored in LaTeX or TeX are common in academic and scientific publications. Your browser typically renders this mathematical markup using an open-source JavaScript display engine such as MathJax or KaTeX.
For example, this is the mathematical markup for the equations displayed at the top of this page:</description></item><item><title>Data sources</title><link>https://gohugo.io/content-management/data-sources/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/data-sources/</guid><description>Hugo can access and unmarshal local and remote data sources including CSV, JSON, TOML, YAML, and XML. Use this data to augment existing content or to create new content.
A data source might be a file in the data directory, a global resource, a page resource, or a remote resource.
Data directory The data directory in the root of your project may contain one or more data files, in either a flat or nested tree.</description></item><item><title>Content adapters</title><link>https://gohugo.io/content-management/content-adapters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/content-management/content-adapters/</guid><description>New in v0.126.0 Overview A content adapter is a template that dynamically creates pages when building a site. For example, use a content adapter to create pages from a remote data source such as JSON, TOML, YAML, or XML.
Unlike templates that reside in the layouts directory, content adapters reside in the content directory, no more than one per directory per language. When a content adapter creates a page, the page&amp;rsquo;s logical path will be relative to the content adapter.</description></item></channel></rss>