<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Render Hooks on Hugo</title><link>https://gohugo.io/categories/render-hooks/</link><description>Recent content in Render Hooks on Hugo</description><generator>Hugo</generator><language>en</language><atom:link href="https://gohugo.io/categories/render-hooks/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://gohugo.io/render-hooks/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/render-hooks/introduction/</guid><description>When rendering Markdown to HTML, render hooks override the conversion. Each render hook is a template, with one template for each supported element type:
Code blocks Headings Images Links Hugo supports multiple content formats including Markdown, HTML, AsciiDoc, Emacs Org Mode, Pandoc, and reStructuredText.
The render hook capability is limited to Markdown. You cannot create render hooks for the other content formats.
For example, consider this Markdown:
[Hugo](https://gohugo.io) ![kitten](kitten.jpg) Without link or image render hooks, this example above is rendered to:</description></item><item><title>Code block render hooks</title><link>https://gohugo.io/render-hooks/code-blocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/render-hooks/code-blocks/</guid><description>Markdown This Markdown example contains a fenced code block:
content/example.md ```bash {class=&amp;#34;my-class&amp;#34; id=&amp;#34;my-codeblock&amp;#34; lineNos=inline tabWidth=2} declare a=1 echo &amp;#34;$a&amp;#34; exit ``` A fenced code block consists of:
A leading code fence An optional info string A code sample A trailing code fence In the previous example, the info string contains:
The language of the code sample (the first word) An optional space-delimited or comma-delimited list of attributes (everything within braces) The attributes in the info string can be generic attributes or highlighting options.</description></item><item><title>Heading render hooks</title><link>https://gohugo.io/render-hooks/headings/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/render-hooks/headings/</guid><description>Context Heading render hook templates receive the following context:
Anchor (string) The id attribute of the heading element.
Attributes (map) The Markdown attributes, available if you configure your site as follows:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; markup: goldmark: parser: attribute: title: true [markup] [markup.goldmark] [markup.goldmark.parser] [markup.goldmark.parser.attribute] title = true { &amp;#34;markup&amp;#34;: { &amp;#34;goldmark&amp;#34;: { &amp;#34;parser&amp;#34;: { &amp;#34;attribute&amp;#34;: { &amp;#34;title&amp;#34;: true } } } } } Level (int) The heading level, 1 through 6.</description></item><item><title>Image render hooks</title><link>https://gohugo.io/render-hooks/images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/render-hooks/images/</guid><description>Markdown A Markdown image has three components: the image description, the image destination, and optionally the image title.
![white kitten](/images/kitten.jpg &amp;#34;A kitten!&amp;#34;) ------------ ------------------ --------- description destination title These components are passed into the render hook context as shown below.
Context Image render hook templates receive the following context:
Attributes (map) The Markdown attributes, available if you configure your site as follows:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; markup: goldmark: parser: attribute: block: true wrapStandAloneImageWithinParagraph: false [markup] [markup.</description></item><item><title>Link render hooks</title><link>https://gohugo.io/render-hooks/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://gohugo.io/render-hooks/links/</guid><description>Markdown A Markdown link has three components: the link text, the link destination, and optionally the link title.
[Post 1](/posts/post-1 &amp;#34;My first post&amp;#34;) ------ ------------- ------------- text destination title These components are passed into the render hook context as shown below.
Context Link render hook templates receive the following context:
Destination (string) The link destination.
Page (page) A reference to the current page.
PageInner New in v0.125.0 (page) A reference to a page nested via the RenderShortcodes method.</description></item></channel></rss>