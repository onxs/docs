<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Fundamentals on Hugo</title><link>https://mc.is-local.org/docs/categories/fundamentals/</link><description>Recent content in Fundamentals on Hugo</description><generator>Hugo</generator><language>en</language><atom:link href="https://mc.is-local.org/docs/categories/fundamentals/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction to templating</title><link>https://mc.is-local.org/docs/templates/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/templates/introduction/</guid><description>A template is a file in the layouts directory of a project, theme, or module. Templates use variables , functions, and methods to transform your content, resources, and data into a published page.
Hugo uses Go&amp;rsquo;s text/template and html/template packages.
The text/template package implements data-driven templates for generating textual output, while the html/template package implements data-driven templates for generating HTML output safe against code injection.
By default, Hugo uses the html/template package when rendering HTML files.</description></item><item><title>Content organization</title><link>https://mc.is-local.org/docs/content-management/organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/content-management/organization/</guid><description>Page bundles Hugo 0.32 announced page-relative images and other resources packaged into Page Bundles.
These terms are connected, and you also need to read about Page Resources and Image Processing to get the full picture.
content/ ├── blog/ │ ├── hugo-is-cool/ │ │ ├── images/ │ │ │ ├── funnier-cat.jpg │ │ │ └── funny-cat.jpg │ │ ├── cats-info.md │ │ └── index.md │ ├── posts/ │ │ ├── post1.md │ │ └── post2.</description></item><item><title>Directory structure</title><link>https://mc.is-local.org/docs/getting-started/directory-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/getting-started/directory-structure/</guid><description>Site skeleton Hugo generates a project skeleton when you create a new site. For example, this command:
hugo new site my-site Creates this directory structure:
my-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── content/ ├── data/ ├── i18n/ ├── layouts/ ├── static/ ├── themes/ └── hugo.toml &amp;lt;-- site configuration Depending on requirements, you may wish to organize your site configuration into subdirectories:
my-site/ ├── archetypes/ │ └── default.md ├── assets/ ├── config/ &amp;lt;-- site configuration │ └── _default/ │ └── hugo.</description></item><item><title>Configure Hugo</title><link>https://mc.is-local.org/docs/getting-started/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/getting-started/configuration/</guid><description>Configuration file Create a site configuration file in the root of your project directory, naming it hugo.toml, hugo.yaml, or hugo.json, with that order of precedence.
my-project/ └── hugo.toml With v0.109.0 and earlier the basename of the site configuration file was config instead of hugo. You can use either, but should transition to the new naming convention when practical.
A simple example:
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; baseURL: https://example.org/ languageCode: en-us params: contact: email: info@example.</description></item><item><title>Template lookup order</title><link>https://mc.is-local.org/docs/templates/lookup-order/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/templates/lookup-order/</guid><description>Lookup rules Hugo takes the parameters listed below into consideration when choosing a template for a given page. The templates are ordered by specificity. This should feel natural, but look at the table below for concrete examples of the different parameter variations.
Kind The page Kind (the home page is one). See the example tables below per kind. This also determines if it is a single page (i.e. a regular content page.</description></item><item><title>Base templates</title><link>https://mc.is-local.org/docs/templates/base/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/templates/base/</guid><description>The block keyword allows you to define the outer shell of your pages&amp;rsquo; one or more master template(s) and then fill in or override portions as necessary.
Base template lookup order The base template lookup order closely follows that of the template it applies to (e.g. _default/list.html).
See Template Lookup Order for details and examples.
Define the base template The following defines a simple base template at _default/baseof.html. As a default template, it is the shell from which all your pages will be rendered unless you specify another *baseof.</description></item><item><title>Configure markup</title><link>https://mc.is-local.org/docs/getting-started/configuration-markup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/getting-started/configuration-markup/</guid><description>Default handler Hugo uses Goldmark to render Markdown to HTML.
hugo. yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; markup: defaultMarkdownHandler: goldmark [markup] defaultMarkdownHandler = &amp;#39;goldmark&amp;#39; { &amp;#34;markup&amp;#34;: { &amp;#34;defaultMarkdownHandler&amp;#34;: &amp;#34;goldmark&amp;#34; } } Files with the .md or .markdown extension are processed as Markdown, provided that you have not specified a different content format using the markup field in front matter.
To use a different renderer for Markdown files, specify one of asciidocext, org, pandoc, or rst in your site configuration.</description></item><item><title>Build options</title><link>https://mc.is-local.org/docs/content-management/build-options/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/content-management/build-options/</guid><description>Build options are stored in a reserved front matter object named build with these defaults:
content/example/index.md yaml &amp;nbsp; toml &amp;nbsp; json &amp;nbsp; --- build: list: always publishResources: true render: always --- +++ [build] list = &amp;#39;always&amp;#39; publishResources = true render = &amp;#39;always&amp;#39; +++ { &amp;#34;build&amp;#34;: { &amp;#34;list&amp;#34;: &amp;#34;always&amp;#34;, &amp;#34;publishResources&amp;#34;: true, &amp;#34;render&amp;#34;: &amp;#34;always&amp;#34; } } list When to include the page within page collections. Specify one of: always Include the page in all page collections.</description></item><item><title>Image processing</title><link>https://mc.is-local.org/docs/content-management/image-processing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/content-management/image-processing/</guid><description>Image resources To process an image you must access the file as a page resource, global resource, or remote resource.
Page resource A page resource is a file within a page bundle. A page bundle is a directory with an index.md or _index.md file at its root.
content/ └── posts/ └── post-1/ &amp;lt;-- page bundle ├── index.md └── sunset.jpg &amp;lt;-- page resource To access an image as a page resource:</description></item><item><title>Custom output formats</title><link>https://mc.is-local.org/docs/templates/output-formats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://mc.is-local.org/docs/templates/output-formats/</guid><description>This page describes how to properly configure your site with the media types and output formats, as well as where to create your templates for your custom outputs.
Media types A media type (formerly known as a MIME type) is a two-part identifier for file formats and format contents transmitted on the internet.
This is the full set of built-in media types in Hugo:
Type suffixes application/json [json] application/manifest&amp;#43;json [webmanifest] application/octet-stream [webmanifest] application/pdf [pdf] application/rss&amp;#43;xml [xml rss] application/toml [toml] application/wasm [wasm] application/xml [xml] application/yaml [yaml yml] font/otf [otf] font/ttf [ttf] image/bmp [bmp] image/gif [gif] image/jpeg [jpg jpeg jpe jif jfif] image/png [png] image/svg&amp;#43;xml [svg] image/tiff [tif tiff] image/webp [webp] text/asciidoc [adoc asciidoc ad] text/calendar [ics] text/css [css] text/csv [csv] text/html [html htm] text/javascript [js jsm mjs] text/jsx [jsx] text/markdown [md mdown markdown] text/org [org] text/pandoc [pandoc pdc] text/plain [txt] text/rst [rst] text/tsx [tsx] text/typescript [ts] text/x-sass [sass] text/x-scss [scss] video/3gpp [3gpp 3gp] video/mp4 [mp4] video/mpeg [mpg mpeg] video/ogg [ogv] video/webm [webm] video/x-msvideo [avi] Note:</description></item></channel></rss>